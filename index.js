#!/usr/bin/env node

/**
 * –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è JavaScript –∑–∞–¥–∞—á
 * –ó–∞–ø—É—Å–∫: node index.js
 */

console.log('üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ zadachijs2!');
console.log('üìö –ö–æ–ª–ª–µ–∫—Ü–∏—è JavaScript –∑–∞–¥–∞—á –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π');
console.log('');

// –ò–º–ø–æ—Ä—Ç –∑–∞–¥–∞—á –∏–∑ –ø–∞–ø–æ–∫
const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
function loadTasks(directory) {
    const tasks = [];
    const fullPath = path.join(__dirname, directory);
    
    if (fs.existsSync(fullPath)) {
        const files = fs.readdirSync(fullPath, { withFileTypes: true });
        
        files.forEach(file => {
            if (file.isDirectory()) {
                const taskPath = path.join(directory, file.name);
                const taskFiles = fs.readdirSync(path.join(fullPath, file.name));
                const jsFiles = taskFiles.filter(f => f.endsWith('.js'));
                
                if (jsFiles.length > 0) {
                    tasks.push({
                        name: file.name,
                        path: taskPath,
                        files: jsFiles
                    });
                }
            }
        });
    }
    
    return tasks;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á
const allTasks = [
    ...loadTasks('lvl1'),
    ...loadTasks('1')
];

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á
console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏:');
console.log('');

if (allTasks.length === 0) {
    console.log('‚ùå –ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    console.log('üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª—ã .js –≤ –ø–∞–ø–∫–∞—Ö lvl1 –∏–ª–∏ 1');
} else {
    allTasks.forEach((task, index) => {
        console.log(`${index + 1}. ${task.name}`);
        console.log(`   üìÅ –ü—É—Ç—å: ${task.path}`);
        console.log(`   üìÑ –§–∞–π–ª—ã: ${task.files.join(', ')}`);
        console.log('');
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
function runTask(taskName) {
    const task = allTasks.find(t => t.name === taskName);
    
    if (!task) {
        console.log(`‚ùå –ó–∞–¥–∞—á–∞ "${taskName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        return;
    }
    
    console.log(`\nüéØ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: ${task.name}`);
    console.log('=' .repeat(50));
    
    task.files.forEach(file => {
        const filePath = path.join(__dirname, task.path, file);
        console.log(`\nüìÑ –ó–∞–ø—É—Å–∫ —Ñ–∞–π–ª–∞: ${file}`);
        console.log('-'.repeat(30));
        
        try {
            require(filePath);
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ ${file}:`, error.message);
        }
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);

if (args.length > 0) {
    const taskName = args[0];
    runTask(taskName);
} else {
    console.log('üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
    console.log('  node index.js                    - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏');
    console.log('  node index.js <–∏–º—è_–∑–∞–¥–∞—á–∏>       - –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É');
    console.log('');
    console.log('üîß –ü—Ä–∏–º–µ—Ä—ã:');
    console.log('  node index.js task1');
    console.log('  node index.js task2');
}
